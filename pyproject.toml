[tool.poetry]

name = "p2g"
version = "0.2.29"
description = "Transpile python into cnc gcode."
authors = ["sac <sac@0x5ac.com>"]
readme = "readme.md" 
license = "MIT"
keywords = ["cnc", "gcode", "mill", "haas", "g-code", "probe", "vf"]
classifiers = [
"Development Status :: 3 - Alpha",
"Intended Audience :: Manufacturing",
"Intended Audience :: Other Audience",
"Topic :: Software Development :: Compilers",
"Programming Language :: Python",
]
repository = 'https://github.com/0x5ac/p2g'
homepage = 'https://github.com/0x5ac/p2g'


packages = [
    { include = "p2g",    format = "sdist"},
]


[tool.poetry.dependencies]
python = "^3.10"
typeguard = "^3.0.2"
rich = "^13.3.4"
docopt = "^0.6.2"

[tool.poetry.scripts]
p2g = "p2g.main:main"

[tool.poetry.group.dev.dependencies]
pytest = {extras = ["all"], version = "^7.3.1"}
pytest-cov = "^4.0.0"
coverage = "^7.2.3"
mypy = "^1.2.0"
pylint = "^2.17.2"
pydeps = "^1.12.1"
flake8-annotations-complexity = "^0.0.7"
flake8-pyproject = {extras = ["all"], version = "^1.2.3"}
black = "^23.3.0"
ssort = "^0.11.6"
tox = "^4.5.1"
deptry = "^0.8.0"
mccabe = "^0.7.0"
wrapt = "^1.15.0"
dill = "^0.3.6"
autoflake = "^2.1.1"
ruff = "^0.0.272"
pyright = "^1.1.314"

[tool.deptry]
ignore_missing = [ "csearch" , "defs", "pytest" ]
ignore_obsolete = [  "typeguard" ]
extend_exclude = [ 'p2g/tests' ] 

[tool.pyright]
disable = "N802"
ignore = ["N802"]
include = ["p2g/*.py"]
exclude= [ "p2g/tests" , "p2g/doc", "p2g/examples"]
omit = ['p2g/tests/*.py']
[tool.isort]
force_alphabetical_sort_within_sections = true
#force_single_line = true
combine_as_imports = true
lines_between_types = 1
known_localfolder = "p2g"
lines_after_imports = 2
float_to_top = true
force_single_line = true
src_paths = ["p2g","tests"]
skip = ["tests/test_meta.py"]


[tool.black]
line-length=90

[tool.mypy] 
ignore_missing_imports = true
check_untyped_defs = true
exclude= [ "p2g/tests" , "p2g/doc", "p2g/examples"]

[tool.pydocstyle]
ignore  = "D103,D101,D107,D100,D102,D105, D104"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"



[tool.pylint]
init-import = false

disable = [
"abstract-method",
"redefined-builtin",
"missing-module-docstring",
"missing-function-docstring",
"line-too-long",
"missing-class-docstring",
"C0116",
"R0903",
"wrong-import-position",
"logging-fstring-interpolation",
"forgotten-debug-statement",
"W1203"
]

good-names = "_,fn,el,ns,ch,i,n"
ignore = ['tests']
[tool.pytest.ini_options]

filterwarnings = [
    "ignore:Module already imported so cannot be rewritten"
]

console_output_style="classic"
log_format="%(asctime)s %(message)s"
log_date_format="%H%M"
addopts="-p no:pylama -p no:pytest_pylama --cov=p2g --cov-append --tb=short -m 'not forcefail'"

[tool.coverage.run]


[tool.coverage.report]
include = ["p2g/*.py"]
exclude_lines = ["NotImplemented", "AssertionError", "for debug",  "no cover","@(abc\\.)?abstractmethod" ]
omit = ["tests/*.py","examples/*.py","p2g/__main__.py"]


[tool.flake8]
ignore = ['E231', 'E241', "T201", "SCS109", "B601", "IF100","SCS108", "S101","W503",
'G004','E203', 'R504']
exclude= ['tests', 'examples', 'doc']
per-file-ignores = [
    '__init__.py:F401',
    '__main__.py:E402',     #  module level import not at top of file
    'builtin.py:A001',    
    'op.py:E203,E501',

# function names with mixed case in exports.
    'visible.py:N802'
]
max-line-length = 100
count = true


[tool.ruff]
ignore = [ "E501" ]
ignore-init-module-imports = true
exclude= [ "p2g/tests" , "p2g/doc", "p2g/examples"] 

################################################################################


